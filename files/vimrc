set nocompatible              " be iMproved, required
filetype off                  " required

" mouse support - guilty pleasure
set mouse=a

filetype plugin indent on    " required

"" Theme setup
" configure nvcode-color-schemes
let g:nvcode_termcolors=256

let g:nord_bold = 1
let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:nord_uniform_diff_background = 1
let g:nord_uniform_status_lines = 1

syntax on
colorscheme nord

if (has("termguicolors"))
  set termguicolors
  hi LineNr ctermbg=NONE guibg=NONE
endif


set tabstop=4
set shiftwidth=4
set backspace=indent,eol,start

"" Custom list chars
set encoding=utf-8
set listchars=eol:↵,trail:•,tab:\|\ 
set list

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

"" Show line numbers and ruler
set number
set colorcolumn=81

" Disable Background Color Erase (BCE) so that color schemes
" render properly when inside 256-color tmux and GNU screen.
" see also http://sunaku.github.io/vim-256color-bce.html
"set t_ut=

set autowrite      " autosave files on :make
set updatetime=250 " update each 250ms
set synmaxcol=250  " syntax hi. only for first 250 chars. Speed improvement for
                   " files with long lines

"" sudo write
cmap w!! w !sudo tee % >/dev/null

" Inactive/Active window with tmux
"hi Normal guibg=none

"" Set persistent undo
set undofile
set undodir=~/.vim/undodir

" Disable swap and backup files
set noswapfile
set nobackup
set nowb

"" buffers navigation
nmap <silent> <leader>[ :bprevious<CR>
nmap <silent> <leader>] :bnext<CR>
nmap <silent> <leader>; :BD<CR>

"" Tagbar
nmap <silent> <F8> :TagbarToggle<CR>

"" Nvim-Tree
let g:nvim_tree_indent_markers = 1
let g:nvim_tree_width_allow_resize = 1
let g:nvim_tree_show_icons = {
    \ 'git': 1,
    \ 'folders': 1,
    \ 'files': 1,
    \ 'folder_arrows': 0,
    \ }
nnoremap <F7> :NvimTreeToggle<CR>
nnoremap <leader><F7> :NvimTreeFindFile<CR>

" TODO improve Git hl
" a list of groups can be found at `:help nvim_tree_highlight`
"highlight NvimTreeFolderIcon guibg=blue

"" telescope.nvim
"nnoremap <C-p> <cmd>Telescope find_files<cr>
"nnoremap <leader>se <cmd>Telescope live_grep<cr>
"nnoremap <leader>' <cmd>Telescope buffers<cr>
"nnoremap <leader>= <cmd>Telescope oldfiles<cr>
"nnoremap <leader>fh <cmd>Telescope help_tags<cr>


"" fzf
nmap <silent> <C-p> :FZF<CR>
nmap <silent> <leader>' :Buffers<CR>
nmap <silent> <leader>q :Tags<CR>
nmap <silent> <leader>= :History<CR>
nmap <silent> <leader>se :Ag<CR>
nmap <silent> <leader>gs :GFiles?<CR>
"imap <c-x><c-l> <plug>(fzf-complete-line)

" run fzf in floating window
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8, 'highlight': 'Type', 'border': 'rounded' } }

"" vim-floaterm
let g:floaterm_autoclose = 1 " close window on success
let g:floaterm_autohide = 2  " always autohide

let g:floaterm_width = 0.9
let g:floaterm_height = 0.8
let g:floaterm_borderchars = "─│─│╭╮╯╰"

" Set floating window border line color to cyan, and background to orange
hi FloatermBorder guibg=Normal guifg=#81a1c1

nnoremap <silent> <leader>e :FloatermToggle<CR>
tnoremap <silent> <leader>e <C-\><C-n>:FloatermToggle<CR>
nnoremap <silent> <leader>ftn :FloatermNext<CR>
tnoremap <silent> <leader>ftn <C-\><C-n>:FloatermNext<CR>

"" Vimwiki
let g:vimwiki_table_mappings=0
let g:vimwiki_list = [{'path': '~/.vimwiki/',
                     \ 'syntax': 'markdown',
                     \ 'ext': '.md'}]

let g:vimwiki_table_mappings=0
autocmd FileType vimwiki nnoremap <leader>t :VimwikiToggleListItem<CR>

hi VimwikiHeader1 guifg=#8fbcbb
hi VimwikiHeader2 guifg=#a3be8c
hi VimwikiHeader3 guifg=#5e81ac
hi VimwikiHeader4 guifg=#ebcb8b
hi VimwikiHeader5 guifg=#d08770
hi VimwikiHeader6 guifg=#bf616a

"" terraform-vim
let g:terraform_fmt_on_save=1

"" vim-slime
let g:slime_target = "tmux"
let g:slime_paste_file = "$HOME/.slime_paste"
let g:slime_dont_ask_default = 1
let g:slime_default_config = {"socket_name": "default", "target_pane": ":.1"}

"" Golang specific
" run :GoBuild or :GoTestCompile based on the go file (vim-go-tutorial)
function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
        call go#cmd#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
    endif
endfunction

autocmd FileType go nmap <leader>b  :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <Leader>c  <Plug>(go-coverage-toggle)
"
""autocmd FileType go nmap <leader>d <Plug>(go-doc)
"
"" bigger quickfix window
"let g:go_list_height = 5
"
let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports"
"
let g:go_gopls_enabled = 1
" share 'gopls' instance
let g:go_gopls_options=['-remote=auto']
"
"" lsp takes care of that
let g:go_code_completion_enabled = 0
let g:go_doc_keywordprg_enabled = 0
"let g:go_diagnostics_enabled = 0
"
let g:go_def_mapping_enabled = 0
"let g:go_highlight_types = 1
"let g:go_highlight_fields = 1
"let g:go_highlight_functions = 1
"let g:go_highlight_methods = 1
"let g:go_highlight_operators = 1
"let g:go_highlight_function_parameters = 1
"let g:go_highlight_variable_declarations = 1
"let g:go_highlight_variable_assignments = 1
"let g:go_highlight_function_calls = 1
"let g:go_highlight_extra_types = 1

" vim-test
let test#strategy = "floaterm"

""" Lua CONFIG
lua << EOF

require'colorizer'.setup()

-- octo.nvim

-- require('octo').setup()

require'nvim-tree'.setup()

-- lualine

require'lualine'.setup{
  options = { theme  = 'nord' },
}

-- bufferline
require("bufferline").setup{
  options = {
    -- separator_style = "padded_slant",
    diagnostics = "nvim_lsp",
  }
}

-- Telescope
require('telescope').setup{
  -- ...
  defaults = {
    prompt_prefix = "🔍",
  }
}

-- nvim-lspfuzzy
require('lspfuzzy').setup{}

local lspkind = require "lspkind"
lspkind.init()

local cmp = require'cmp'

cmp.setup({
  snippet = {
    expand = function(args)
      vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
    end,
  },

  mapping = {
    ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
    ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
    ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
    ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
    ['<C-e>'] = cmp.mapping({
      i = cmp.mapping.abort(),
      c = cmp.mapping.close(),
    }),
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
  },

  sources = {
    { name = 'nvim_lsp' },
    { name = 'path' },
    { name = 'ultisnips' }, -- For ultisnips users.
    { name = 'buffer', keyword_length = 3 },
    { name = 'treesitter' }
  },

  formatting = {
    -- Youtube: How to set up nice formatting for your sources.
    format = lspkind.cmp_format {
      with_text = true,
      menu = {
        buffer = "[Buf]",
        nvim_lsp = "[LSP]",
        path = "[Path]",
        ultisnips = "[Ulti]",
        treesitter = "[Tree]",
      },
    },
  },

  experimental = {
    native_menu = false,
    ghost_text = true,
  }
})

cmp.setup.cmdline('/', {
  sources = cmp.config.sources(
  {
    { name = 'nvim_lsp_document_symbol' }
  },
  {
    { name = 'buffer' }
  })
})

cmp.setup.cmdline(':', {
  sources = cmp.config.sources(
  {
    { name = 'path' }
  },
  {
    { name = 'cmdline' }
  })
})

-- lsp_signature
lsp_signature_cfg = {
  handler_opts = {
    border = "none"   -- double, single, shadow, none
  },
  extra_trigger_chars = {"(", ","}
}

-- Setup lspconfig.
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())


-- lsp-config
local nvim_lsp = require('lspconfig')


-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)

  require('lsp_signature').on_attach(lsp_signature_cfg)

  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)

  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)

  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

  -- workspaces
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches

local lsp_default_config = {on_attach = on_attach, capabilties = capabilties}
local servers = {
  terraformls = {},
  gopls = {
    filetypes = { 'go', 'gomod', 'gohtmltmpl', 'gotexttmpl' },
    cmd = {'gopls','--remote=auto'},
    flags = { allow_incremental_sync = true, debounce_text_changes = 1000 },
    settings = {
      gopls = {
        analyses = { unusedparams = true, unreachable = false },
        codelenses = {
          generate = true, -- show the `go generate` lens.
          gc_details = true, --  // Show a code lens toggling the display of gc's choices.
          test = true,
          tidy = true,
        },
        usePlaceholders = true,
        completeUnimported = true,
        staticcheck = true,
        matcher = 'fuzzy',
        diagnosticsDelay = '500ms',
        experimentalWatchedFileDelay = '1000ms',
        symbolMatcher = 'fuzzy',
        gofumpt = false, -- true, -- turn on for new repos, gofmpt is good but also create code turmoils
        buildFlags = { '-tags', 'lint' },
        -- hoverKind = "FullDocumentation",
      },
    },
  }
}

for server, config in pairs(servers) do
  nvim_lsp[server].setup(vim.tbl_deep_extend('force', lsp_default_config, config))
end

-- devicons
require'nvim-web-devicons'.setup {
 -- globally enable default icons (default to false)
  default = true;
}

-- nvim-treesitter
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  highlight = {
    enable = true
  },
  indent = {
    enable = true
  }
}

EOF
